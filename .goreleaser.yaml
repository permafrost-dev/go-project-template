env:
  - GOPROXY="https://proxy.golang.org,direct"
  
universal_binaries:
  - replace: true

archives:
  - id: default
    wrap_in_directory: true

before:
  hooks:
    - make build

builds:
  - main: ./cmd/app
    binary: app

    # Custom flags templates.
    # Default is `-s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}} -X main.builtBy=goreleaser`.
    ldflags:
      - -s -w -X main.build={{.Version}}

    # GOOS list to build for.
    # For more info refer to: https://golang.org/doc/install/source#environment
    # Defaults are darwin and linux.
    goos:
      - linux
      - windows
      - darwin

    # GOARCH to build for.
    # For more info refer to: https://golang.org/doc/install/source#environment
    # Defaults are 386, amd64 and arm64.
    goarch:
      - amd64
      - arm64

brews:
  -
    name: app
    homepage: 'https://github.com/permafrost-dev/app'
    description: 'app'
    tap:
      owner: permafrost-dev
      name: homebrew-app
      
# brews:
#   -
#     # Name template of the recipe
#     # Default to project name
#     name: cvault

#     # GitHub/GitLab repository to push the formula to
#     tap:
#       owner: getclair
#       name: homebrew-tap

#       # Optionally a branch can be provided.
#       # Defaults to the default repository branch.
#       branch: main

#       # Optionally a token can be provided, if it differs from the token
#       # provided to GoReleaser
#       token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"

#     # Template for the url which is determined by the given Token (github,
#     # gitlab or gitea)
#     #
#     # Default depends on the client.
#     url_template: "http://github.mycompany.com/foo/bar/releases/{{ .Tag }}/{{ .ArtifactName }}"

#     # Allows you to set a custom download strategy. Note that you'll need
#     # to implement the strategy and add it to your tap repository.
#     # Example: https://docs.brew.sh/Formula-Cookbook#specifying-the-download-strategy-explicitly
#     # Default is empty.
#     download_strategy: CurlDownloadStrategy

#     # Allows you to add a custom require_relative at the top of the formula
#     # template.
#     # Default is empty
#     custom_require: custom_download_strategy

#     # Git author used to commit to the repository.
#     # Defaults are shown.
#     commit_author:
#       name: goreleaserbot
#       email: bot@goreleaser.com

#     # The project name and current git tag are used in the format string.
#     commit_msg_template: "Brew formula update for {{ .ProjectName }} version {{ .Tag }}"

#     # Folder inside the repository to put the formula.
#     # Default is the root folder.
#     folder: Formula

#     # Caveats for the user of your binary.
#     # Default is empty.
#     caveats: "How to use this binary"

#     # Your app's homepage.
#     # Default is empty.
#     homepage: "https://example.com/"

#     # Template of your app's description.
#     # Default is empty.
#     description: "Software to create fast and easy drum rolls."

#     # SPDX identifier of your app's license.
#     # Default is empty.
#     license: "MIT"

#     # Setting this will prevent goreleaser to actually try to commit the updated
#     # formula - instead, the formula file will be stored on the dist folder only,
#     # leaving the responsibility of publishing it to the user.
#     # If set to auto, the release will not be uploaded to the homebrew tap
#     # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
#     # Default is false.
#     skip_upload: true
